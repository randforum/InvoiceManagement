// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SourceCode.Models;

namespace SourceCode.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20200129160036_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "d186fd85-2079-41fb-b7a9-e733886d2a04",
                            ConcurrencyStamp = "17e7dca7-546f-4e71-aa6a-3f5d3fea1f93",
                            Name = "Webmaster",
                            NormalizedName = "WEBMASTER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SourceCode.Models.Currency", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Symbol")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Currency");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Symbol = "USD"
                        },
                        new
                        {
                            ID = 2,
                            Symbol = "GBP"
                        },
                        new
                        {
                            ID = 3,
                            Symbol = "EUR"
                        },
                        new
                        {
                            ID = 4,
                            Symbol = "INR"
                        },
                        new
                        {
                            ID = 5,
                            Symbol = "BDT"
                        });
                });

            modelBuilder.Entity("SourceCode.Models.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<string>("Skype");

                    b.HasKey("ID");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("SourceCode.Models.EmailSettings", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmailPassword")
                        .IsRequired();

                    b.Property<bool>("EnableSsl");

                    b.Property<string>("FromEmail")
                        .IsRequired();

                    b.Property<string>("Host")
                        .IsRequired();

                    b.Property<int>("PortNo");

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("EmailSettings");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            EmailPassword = "",
                            EnableSsl = false,
                            FromEmail = "",
                            Host = "",
                            PortNo = 25,
                            Subject = "",
                            Username = ""
                        });
                });

            modelBuilder.Entity("SourceCode.Models.General", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<int>("CurrencyID");

                    b.Property<string>("Email");

                    b.Property<string>("InvoiceFooter");

                    b.Property<string>("InvoiceHeader");

                    b.Property<string>("InvoicePrefix");

                    b.Property<string>("InvoiceSubHeader");

                    b.Property<string>("LogoUrl");

                    b.Property<string>("Name");

                    b.Property<int>("PageSize");

                    b.Property<string>("Phone");

                    b.Property<string>("Taxes")
                        .IsRequired();

                    b.Property<string>("Terms");

                    b.Property<string>("Website");

                    b.HasKey("ID");

                    b.ToTable("GeneralSettings");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Address = "New York, United States.",
                            CurrencyID = 1,
                            Email = "info@website.com",
                            InvoiceFooter = "Advance Invoice & Billing | Email: info@website.com",
                            InvoiceHeader = "Advance Invoice",
                            InvoicePrefix = "AI",
                            InvoiceSubHeader = "Invoice Solutions by AI Corp.",
                            Name = "Advance Invoice & Billing",
                            PageSize = 150,
                            Phone = "+2-99-45-90-88",
                            Taxes = "5",
                            Terms = "This is a digital invoice so doesn't require any signature.",
                            Website = "www.website.com"
                        });
                });

            modelBuilder.Entity("SourceCode.Models.InvoiceHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerID");

                    b.Property<DateTime>("InvoiceDate");

                    b.Property<DateTime>("InvoiceDueDate");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("LayoutName");

                    b.Property<string>("ShareableID");

                    b.Property<bool>("ShowPaymentButton");

                    b.Property<string>("SpecificNotes");

                    b.Property<string>("Status");

                    b.Property<decimal>("TotalTaxes");

                    b.Property<decimal>("TotalWithTaxes");

                    b.Property<decimal>("TotalWithoutTax");

                    b.HasKey("ID");

                    b.ToTable("InvoiceHistory");
                });

            modelBuilder.Entity("SourceCode.Models.InvoiceHistoryProducts", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("InvoiceHistoryID");

                    b.Property<int>("ProdcutID");

                    b.Property<decimal>("ProdcutSubTotal");

                    b.Property<int>("ProdcutUnits");

                    b.Property<decimal>("ProductUnitPrice");

                    b.HasKey("ID");

                    b.ToTable("InvoiceHistoryProducts");
                });

            modelBuilder.Entity("SourceCode.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<string>("ProductName")
                        .IsRequired();

                    b.Property<decimal>("ProductUnitPrice");

                    b.HasKey("ID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
